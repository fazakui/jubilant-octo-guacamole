import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';

class UserInteractionPage extends StatelessWidget {
  const UserInteractionPage({super.key});

  // Method to flag an item with a confirmation dialog
  Future<void> flagItemWithConfirmation(
    BuildContext context,
    String collectionName,
    String documentId,
    String userId,
  ) async {
    bool? confirmFlag = await showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text("Confirm Action"),
        content: const Text("Are you sure you want to flag this item as inappropriate?"),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context, false),
            child: const Text("Cancel"),
          ),
          TextButton(
            onPressed: () => Navigator.pop(context, true),
            child: const Text("Confirm"),
          ),
        ],
      ),
    );

    if (confirmFlag == true) {
      try {
        var documentSnapshot =
            await FirebaseFirestore.instance.collection(collectionName).doc(documentId).get();

        if (!documentSnapshot.exists) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text("Document does not exist.")),
          );
          return;
        }

        await FirebaseFirestore.instance.collection(collectionName).doc(documentId).update({
          'flag': true,
        });

        await FirebaseFirestore.instance.collection('users').doc(userId).set(
          {
            'flag': true,
          },
          SetOptions(merge: true),
        );

        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text("Item flagged as inappropriate")),
        );
      } catch (e) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text("Error flagging item: $e")),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: PreferredSize(
          preferredSize: Size.fromHeight(60.0),  // Adjust the height of the AppBar
          child: Container(
            decoration: BoxDecoration(
              gradient: LinearGradient(
                colors: [
                  Color(0xFF64B5F6), // Soft Sky Blue
                  Color(0xFF1976D2), // Slate Blue
                  Color(0xFF0D47A1), // Charcoal Blue
                ],
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
              ),
            ),
            child: AppBar(
              leading: IconButton(
                  icon: Icon(
                    Icons.arrow_back, // Default back arrow icon
                    color: Colors.white, // Change the back button color to white
                  ),
                  onPressed: () {
                    Navigator.pop(context); // This will navigate back to the previous screen
                  },
                ),
              title: const Text(
                "User Interaction Management",
                style: TextStyle(
                  color: Colors.white, // Change the text color to white to contrast with the gradient
                  fontWeight: FontWeight.bold,
                ),
              ),
              centerTitle: true,
              backgroundColor: Colors.transparent, // Make the AppBar's background transparent
              elevation: 0,
            ),
          ),
        ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              "Overview of Reviews",
              style: TextStyle(
                fontSize: 20,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 10),
            StreamBuilder<QuerySnapshot>(
              stream: FirebaseFirestore.instance.collection('reviews').snapshots(),
              builder: (context, snapshot) {
                if (snapshot.connectionState == ConnectionState.waiting) {
                  return const Center(child: CircularProgressIndicator());
                }

                if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {
                  return const Center(child: Text("No reviews found."));
                }

                final reviews = snapshot.data!.docs;

                return ListView.builder(
                  physics: const NeverScrollableScrollPhysics(),
                  shrinkWrap: true,
                  itemCount: reviews.length,
                  itemBuilder: (context, index) {
                    final review = reviews[index].data() as Map<String, dynamic>;
                    final reviewId = reviews[index].id;
                    final userId = review['userId'] ?? '';
                    final propertyId = review['propertyID'] ?? 'N/A';
                    final reviewer = review['userName'] ?? 'Unknown';
                    final reviewText = review['reviewText'] ?? 'No review text.';
                    final rating = review['safetyRating'] ?? 0;
                    final flagged = review['flag'] ?? false;

                    return Card(
                      color: Colors.white,
                      margin: const EdgeInsets.symmetric(vertical: 8.0),
                      elevation: 3,
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(10),
                      ),
                      child: Padding(
                        padding: const EdgeInsets.all(12.0),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              "Property ID: $propertyId",
                              style: const TextStyle(
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                            const SizedBox(height: 4),
                            Text("Reviewer: $reviewer"),
                            const SizedBox(height: 4),
                            Text("Review: $reviewText"),
                            const SizedBox(height: 8),
                            Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              children: [
                                Row(
                                  children: List.generate(
                                    5,
                                    (ratingIndex) => Icon(
                                      ratingIndex < rating
                                          ? Icons.star
                                          : Icons.star_border,
                                      color: Colors.orange,
                                      size: 16,
                                    ),
                                  ),
                                ),
                                ElevatedButton(
                                  onPressed: flagged
                                      ? null
                                      : () => flagItemWithConfirmation(
                                            context,
                                            'reviews',
                                            reviewId,
                                            userId,
                                          ),
                                  child: flagged
                                      ? const Text("Already Flagged")
                                      : const Text("Flag as Inappropriate"),
                                ),
                              ],
                            ),
                          ],
                        ),
                      ),
                    );
                  },
                );
              },
            ),
            const SizedBox(height: 20),
            const Text(
              "Forum Feed",
              style: TextStyle(
                fontSize: 20,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 10),
            StreamBuilder<QuerySnapshot>(
              stream: FirebaseFirestore.instance.collection('forums').snapshots(),
              builder: (context, snapshot) {
                if (snapshot.connectionState == ConnectionState.waiting) {
                  return const Center(child: CircularProgressIndicator());
                }

                if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {
                  return const Center(child: Text("No forum comments found."));
                }

                final comments = snapshot.data!.docs;

                return ListView.builder(
                  physics: const NeverScrollableScrollPhysics(),
                  shrinkWrap: true,
                  itemCount: comments.length,
                  itemBuilder: (context, index) {
                    final comment = comments[index].data() as Map<String, dynamic>;
                    final commentId = comments[index].id;
                    final userId = comment['userId'] ?? '';
                    final commentText = comment['commentText'] ?? 'No comment.';
                    final title = comment['title'] ?? 'No title.';
                    final userName = comment['name'] ?? 'Unknown';
                    final description = comment['description'] ?? 'No description provided.';
                    final flagged = comment['flag'] ?? false;

                    return Card(
                      color: Colors.white,
                      margin: const EdgeInsets.symmetric(vertical: 8.0),
                      elevation: 3,
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(10),
                      ),
                      child: Padding(
                        padding: const EdgeInsets.all(12.0),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              "User: $userName",
                              style: const TextStyle(
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                            const SizedBox(height: 4),
                            Text("Title: $title"),
                            const SizedBox(height: 4),
                            Text("Description: $description"),
                            const SizedBox(height: 4),
                            Text("Comment: $commentText"),
                            const SizedBox(height: 8),
                            ElevatedButton(
                              onPressed: flagged
                                  ? null
                                  : () => flagItemWithConfirmation(
                                        context,
                                        'forums',
                                        commentId,
                                        userId,
                                      ),
                              child: flagged
                                  ? const Text("Already Flagged")
                                  : const Text("Flag as Inappropriate"),
                            ),
                          ],
                        ),
                      ),
                    );
                  },
                );
              },
            ),
          ],
        ),
      ),
    );
  }
}
