import 'package:flutter/material.dart';
import 'package:studrent_cat/Administration%20Module/firebase_admin.dart';
import 'package:studrent_cat/Property%20Module/view_document.dart';

class PropertyDetailsPage extends StatefulWidget {
  final String landlordId;
  final String propertyId;

  const PropertyDetailsPage({
    super.key,
    required this.landlordId,
    required this.propertyId,
  });

  @override
  _PropertyDetailsPageState createState() => _PropertyDetailsPageState();
}

class _PropertyDetailsPageState extends State<PropertyDetailsPage> {
  final FirebaseService firebaseService = FirebaseService();
  Map<String, dynamic>? propertyDetails;
  bool isLoading = true;

  @override
  void initState() {
    super.initState();
    _fetchPropertyDetails();
  }

  Future<void> _fetchPropertyDetails() async {
    final details = await firebaseService.getPropertyById(widget.propertyId);
    setState(() {
      propertyDetails = details;
      isLoading = false;
    });
  }
  
  Future<void> _updatePropertyStatus(String status) async {
    final adminId = "admin_123"; // Replace with the actual admin ID
    await firebaseService.updatePropertyStatusAndReview(
      widget.propertyId,
      status,
      adminId,
    );
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text("Property status updated to $status")),
    );
    Navigator.pop(context);
  }

  // Method to open a URL (for documents) or copy to clipboard
  Future<void> _openOrCopyDocument(String url) async {
  Navigator.push(
    context,
    MaterialPageRoute(
      builder: (context) => ViewDocumentScreen(
        filePath: url,
        fileType: url.endsWith(".pdf") ? "pdf" : "image",
      ),
    ),
  );
}


  Future<void> _rejectProperty() async {
    final reasons = [
      "Inappropriate image/document",
      "Inappropriate details in pre-draft agreement",
      "Inappropriate property details",
      "Other"
    ];

    final selectedReasons = <String>{};

    await showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
        title: const Text("Select Rejection Reasons"),
        content: StatefulBuilder(
          builder: (BuildContext context, StateSetter setState) {
            return SingleChildScrollView(
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: reasons.map((reason) {
                  return CheckboxListTile(
                    title: Text(reason),
                    value: selectedReasons.contains(reason),
                    onChanged: (bool? value) {
                      setState(() {
                        if (value == true) {
                          selectedReasons.add(reason);
                        } else {
                          selectedReasons.remove(reason);
                        }
                      });
                    },
                  );
                }).toList(),
              ),
            );
          },
        ),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.of(context).pop();
            },
            child: const Text("Cancel"),
          ),
          TextButton(
            onPressed: () {
              Navigator.of(context).pop();
            },
            child: const Text("Confirm"),
          ),
        ],
      );
      },
    );

    if (selectedReasons.isNotEmpty) {
    // Combine selected reasons into a single string
    final combinedReasons = selectedReasons.join(", ");
    final adminId = "admin_123"; // Replace with the actual admin ID

    // Save rejection reasons and update status in Firebase
    await firebaseService.updatePropertyStatusAndReason(
      widget.propertyId,
      "Rejected",
      combinedReasons,
      adminId,
    );

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text("Property rejected due to: $combinedReasons")),
    );

    Navigator.pop(context);
  }
}


  @override
  Widget build(BuildContext context) {
    if (isLoading) {
      return const Scaffold(
        body: Center(child: CircularProgressIndicator()),
      );
    }

    if (propertyDetails == null) {
      return const Scaffold(
        body: Center(child: Text("Property details not found.")),
      );
    }
    final Map<String, dynamic> fieldNames = {
    "images": "Images",
    "propertyId": "Property ID",
    "ownerId": "Landlord ID",
    "status": "Property Status",
    "createdAt": "Created At",
    "document": "Documents",
    "address": "Property Address",
    "latitude": "Latitude",
    "longitude": "Longitude",
    "distance": "Distance to USM (km)",
    "rentAmount": "Rent Amount (RM)",
    "size": "Property Size",
    "rentType": "Type of Rent",
    "propertyType": "Type of Property",
    "roomType": "Type of Room",
    "utilities": "Utilities Provided",
    "amenities": "Amenities",
    "furnishingType": "Furnishing Type",
    "numberOfRooms": "Number of Rooms",
    "numberOfBathrooms": "Number of Bathrooms",
    "leaseTerm": "Lease Term",
    "description": "Description",
    "safetyBadges": "Safety Verified",
    "safetynsecurity": "Safety and Security Checklist",
    "messageReject": "Property Rejection Message",
    "messageRejectSafety": "Safety Rejection Message",
  };
    return Scaffold(
      appBar: PreferredSize(
        preferredSize: Size.fromHeight(60.0),  // Adjust the height of the AppBar
        child: Container(
          decoration: BoxDecoration(
            gradient: LinearGradient(
              colors: [
                Color(0xFF64B5F6), // Soft Sky Blue
                Color(0xFF1976D2), // Slate Blue
                Color(0xFF0D47A1), // Charcoal Blue
              ],
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ),
          ),
          child: AppBar(
            leading: null,
            title: const Text(
              "Property Details",
              style: TextStyle(
                color: Colors.white, // Change the text color to white to contrast with the gradient
                fontWeight: FontWeight.bold,
              ),
            ),
            centerTitle: true,
            backgroundColor: Colors.transparent, // Make the AppBar's background transparent
            elevation: 0,
          ),
        ),
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              "Property Name: ${propertyDetails?['propertyName'] ?? 'Unknown Property'}",
              style: const TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
              ),
            ),
            Card(
  color: Colors.white,
  margin: const EdgeInsets.symmetric(vertical: 8.0),
  child: Padding(
    padding: const EdgeInsets.all(16.0),
    child: Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        ...fieldNames.entries.map((entry) {
          final key = entry.key;
          final label = entry.value;

          if (key == "images" && propertyDetails![key] != null) {
            // Render images
            List<dynamic> imageUrls = propertyDetails![key] as List<dynamic>;
            return Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  label,
                  style: const TextStyle(
                    fontSize: 12,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 8),
                ...imageUrls.map((url) => Padding(
                      padding: const EdgeInsets.symmetric(vertical: 8.0),
                      child: Image.network(
                        url,
                        height: 200,
                        fit: BoxFit.cover,
                      ),
                    )),
              ],
            );
          } 
          else if (key == "document" && propertyDetails![key] != null) {
              // Render documents
              List<dynamic> documentUrls = propertyDetails![key] as List<dynamic>;
              return Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    label,
                    style: const TextStyle(
                      fontSize: 12,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  const SizedBox(height: 8),
                  ...documentUrls.map((documentUrl) {
                    final documentName = Uri.parse(documentUrl).pathSegments.last;

                    return Row(
                      children: [
                        Expanded(
                          child: ElevatedButton.icon(
                            onPressed: () {
                              Navigator.push(
                                context,
                                MaterialPageRoute(
                                  builder: (context) => ViewDocumentScreen(
                                    filePath: documentUrl,
                                    fileType: documentName.endsWith('.pdf') ? 'pdf' : 'image',
                                  ),
                                ),
                              );
                            },
                            icon: const Icon(
                              Icons.visibility,
                              color: Colors.white,
                            ),
                            label: Text(
                              "Open document",
                              style: const TextStyle(color: Colors.white),
                            ),
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.blue,
                            ),
                          ),
                        ),
                      ],
                    );
                  }).toList(),
                ],
              );
            }
            else if (propertyDetails![key] != null) {
                        // Render other fields
                        return Padding(
                          padding: const EdgeInsets.symmetric(vertical: 4.0),
                          child: Row(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Expanded(
                                flex: 1,
                                child: Text(
                                  "$label:",
                                  style: const TextStyle(
                                    fontSize: 12,
                                    fontWeight: FontWeight.w500,
                                  ),
                                ),
                              ),
                              Expanded(
                                flex: 2,
                                child: Text(
                                  "${propertyDetails![key]}",
                                  style: const TextStyle(fontSize: 12),
                                ),
                              ),
                            ],
                          ),
                        );
                      }
                      return const SizedBox.shrink(); // Return empty widget if field is null
                    }).toList(),
                    const SizedBox(height: 10), // Add some space before the reviewed fields
                    Text(
                      "Reviewed By: ${propertyDetails!['reviewedBy'] ?? 'N/A'}",
                      style: const TextStyle(fontSize: 12, fontWeight: FontWeight.w500,),
                    ),
                    const SizedBox(height: 10),
                    Text(
                      "Reviewed At: ${propertyDetails!['reviewedAt']?.toString() ?? 'N/A'}",
                      style: const TextStyle(fontSize: 12, fontWeight: FontWeight.w500,),
                    ),
                  ],
                ),
              ),
            ),

  
            const SizedBox(height: 20),
            Center(
              child: Column(
                children: [
                  const SizedBox(height: 10),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                    children: [
                      ElevatedButton(
                        onPressed: () => _updatePropertyStatus("Approved"),
                        child: const Text("Approve"),
                      ),
                      ElevatedButton(
                        onPressed: () => _rejectProperty(),
                        child: const Text("Reject"),
                      ),
                    ],
                  ),
                ],
              ),
            ),
            
          ],
        ),
      ),
    );
  }
}
