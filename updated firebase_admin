import 'package:cloud_firestore/cloud_firestore.dart';

class FirebaseService {
  // Fetch all properties
  Future<int> getTotalProperties() async {
    final querySnapshot = await FirebaseFirestore.instance
        .collection('properties')
        .where('status', isEqualTo: 'Approved')
        .get();
    return querySnapshot.size;
  }

  // Fetch verified landlords
  Future<int> getVerifiedLandlords() async {
    final querySnapshot = await FirebaseFirestore.instance
        .collection('landlords')
        .get();
    return querySnapshot.size;
  }

  // Fetch active students
  Future<int> getActiveStudents() async {
    final querySnapshot = await FirebaseFirestore.instance
        .collection('students')
        .get();
    return querySnapshot.size;
  }

  // Fetch pending approvals
  Future<int> getPendingApprovals() async {
    final querySnapshot = await FirebaseFirestore.instance
        .collection('properties')
        .where('status', isEqualTo: 'Pending')
        .get();
    return querySnapshot.size;
  }
  // Fetch rejected properties
  Future<int> getRejectedProperties() async {
    final querySnapshot = await FirebaseFirestore.instance
        .collection('properties')
        .where('status', isEqualTo: 'Rejected')
        .get();
    return querySnapshot.size;
  }

  // Fetch incomplete properties
  Future<int> getIncompleteProperties() async {
    final querySnapshot = await FirebaseFirestore.instance
        .collection('properties')
        .where('status', isEqualTo: 'Incomplete')
        .get();
    return querySnapshot.size;
  }


    // Fetch safety badges count
    Future<int> getSafetyBadges() async {
    final querySnapshot = await FirebaseFirestore.instance
        .collection('properties')
        .where('safetyBadges', isEqualTo: 'yes')  // Filter where safetyBadges is 'yes'
        .where('status', isEqualTo: 'Approved')  // Add condition for status to be 'Approved'
        .get();
    return querySnapshot.size;
  }

  // Fetch all property data (for table admin)
  Future<List<Map<String, dynamic>>> getProperties() async {
    final querySnapshot = await FirebaseFirestore.instance.collection('properties').get();

    return querySnapshot.docs.map((doc) {
      final data = doc.data();
      if (data['createdAt'] is Timestamp) {
        data['createdAt'] = (data['createdAt'] as Timestamp).toDate();
      }
      return {
        ...data,
        'isSafetyVerified': data['safetyBadges'] == 'yes', // Check for safety badge
      };
    }).toList();
  }
  // Fetch all data for property (for property page)
  Future<Map<String, dynamic>> getPropertyById(String propertyId) async {
    final docSnapshot = await FirebaseFirestore.instance
        .collection('properties')
        .doc(propertyId)
        .get();

    if (docSnapshot.exists) {
      final data = docSnapshot.data()!;
      if (data['createdAt'] is Timestamp) {
        data['createdAt'] = (data['createdAt'] as Timestamp).toDate();
      }
      return data;
    } else {
      throw Exception("Property not found");
    }
  }
  // get landlord name
  Future<String?> getLandlordName(String landlordId) async {
    final docSnapshot = await FirebaseFirestore.instance
        .collection('landlords')
        .doc(landlordId)
        .get();

    if (docSnapshot.exists) {
      return docSnapshot.data()?['name'];
    }
    return null; // Return null if landlord not found
  }

  // Fetch all property data with landlord name
  Future<List<Map<String, dynamic>>> getPropertiesWithLandlordNames() async {
    final propertiesSnapshot = await FirebaseFirestore.instance.collection('properties').get();

    // Map property data with landlord names
    return await Future.wait(propertiesSnapshot.docs.map((doc) async {
      final propertyData = doc.data();
      if (propertyData['createdAt'] is Timestamp) {
        propertyData['createdAt'] = (propertyData['createdAt'] as Timestamp).toDate();
      }

      // Fetch landlord details
      String landlordName = 'Unknown Landlord';
      if (propertyData['ownerId'] != null) {
        final landlordDoc = await FirebaseFirestore.instance.collection('landlords').doc(propertyData['ownerId']).get();
        if (landlordDoc.exists) {
          landlordName = landlordDoc.data()?['name'] ?? 'Unknown Landlord';
        }
      }

      return {
        ...propertyData,
        'propertyName': propertyData['propertyName'] ?? 'Unnamed Property',
        'landlordName': landlordName,
        'isSafetyVerified': propertyData['safetyBadges'] == 'yes', // Check for safety badge
      };
    }).toList());
  }

  // Update property status with review details
  Future<void> updatePropertyStatusAndReview(
      String propertyId, String status, String reviewedBy) async {
    await FirebaseFirestore.instance.collection('properties').doc(propertyId).update({
      'status': status,
      'reviewedBy': reviewedBy,
      'reviewedAt': DateTime.now().toIso8601String(),
    });
  }

  // Update safety badge
  Future<void> updateSafetyBadge(String propertyId, bool isVerified, String rejectionMessage) async {
    await FirebaseFirestore.instance
        .collection('properties')
        .doc(propertyId)
        .update({
          'safetyBadges': isVerified ? 'yes' : 'no',
          'messageRejectSafety': rejectionMessage,
        });
  }

  // Update property status with rejection reason
// Update property status with rejection reason and review details
  Future<void> updatePropertyStatusAndReason(
      String propertyId, String status, String reason, String reviewedBy) async {
    await FirebaseFirestore.instance.collection('properties').doc(propertyId).update({
      'status': status,
      'messageRejectProperty': reason,
      'reviewedBy': reviewedBy,
      'reviewedAt': DateTime.now().toString(),
    });
  }
  Future<void> updatePropertyStatus(
      String propertyId, String status) async {
    await FirebaseFirestore.instance.collection('properties').doc(propertyId).update({
      'status': status,
      // 'messageRejectProperty': reason,
      // 'reviewedBy': reviewedBy,
      // 'reviewedAt': DateTime.now().toString(),
    });
  }
}
//  updatePropertyStatus(String propertyId, String s) {}}

